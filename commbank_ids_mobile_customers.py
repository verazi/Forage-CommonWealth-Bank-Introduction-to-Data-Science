# -*- coding: utf-8 -*-
"""commbank_ids_mobile_customers.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zA7ulsAdSo3WkQnS88mmzdIATjEiisNZ

## Loading Data
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install Faker

import pandas as pd
import numpy as np
from faker import Faker
from datetime import datetime, timedelta

# Initialize Faker to generate fake names and addresses
fake = Faker()

# Load the dataset
path = '/content/drive/MyDrive/commonwealth_bank_analysis/mobile_customers.xlsx'
df = pd.read_excel(path, index_col=0)

# Display the first 5 rows of the DataFrame
df.iloc[:5,]

"""# Cleaning Data

## Removing unnecessary columns
"""

df = df.drop(columns=['customer_id', 'current_location'])
df.iloc[:5,]

"""## Masking the username column"""

df['username'] = df['username'].apply(lambda x: 'user_' + str(hash(x))[-6:])
df.iloc[:5,]

"""## Replacing the original name column with fake names"""

df['name'] = [fake.name() for _ in range(len(df))]
df.iloc[:5,]

"""## Replacing addresses with fake addresses"""

df['address'] = [fake.address().replace('\n', ' ') for _ in range(len(df))]
df['residence'] = [fake.address().replace('\n', ' ') for _ in range(len(df))]
df.iloc[:5,]

"""## Masking the email column"""

df['email'] = df['email'].apply(lambda x: 'email_' + str(hash(x))[-6:] + '@example.com')
df.iloc[:5,]

"""## Adding noise to date fields"""

def add_date_noise(date):
    if isinstance(date, pd.Timestamp):
        noise_days = np.random.randint(-10, 10)
        new_date = date + timedelta(days=noise_days)
        return new_date
    return date

df['date_registered'] = df['date_registered'].apply(add_date_noise)
df['birthdate'] = df['birthdate'].apply(add_date_noise)
df.iloc[:5,]

"""## Categorising age and salary"""

def categorize_age(age):
    if age < 20:
        return 'Under 20'
    elif age < 30:
        return '20-29'
    elif age < 40:
        return '30-39'
    elif age < 50:
        return '40-49'
    else:
        return '50+'

def categorize_salary(salary):
    if salary < 30000:
        return 'Below $30k'
    elif salary < 60000:
        return '$30k-$59k'
    elif salary < 90000:
        return '$60k-$89k'
    else:
        return '$90k+'

df['age_category'] = df['age'].apply(categorize_age)
df['salary_category'] = df['salary'].apply(categorize_salary)

# Drop original age and salary columns
df = df.drop(columns=['age', 'salary'])
df.iloc[:5,]

"""## Tokenizing categorical columns"""

def tokenize(column):
    unique_values = column.unique()
    token_dict = {val: 'token_' + str(i) for i, val in enumerate(unique_values)}
    return column.map(token_dict)

df['credit_card_provider'] = tokenize(df['credit_card_provider'])
df['credit_card_expire'] = tokenize(df['credit_card_expire'])
df['employer'] = tokenize(df['employer'])
df['job'] = tokenize(df['job'])
df.iloc[:5,]

"""## Masking credit card information"""

df['credit_card_number'] = df['credit_card_number'].astype(str).apply(lambda x: 'XXXX-XXXX-XXXX-' + x[-4:])
df['credit_card_security_code'] = df['credit_card_security_code'].astype(str).apply(lambda x: 'XXX')

df.iloc[:5,]

"""# Saving the anonymized dataset"""

df.to_csv('/content/drive/MyDrive/commonwealth_bank_analysis/anonymized_mobile_customers.csv', index=False)